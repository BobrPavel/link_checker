import asyncio
from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command

from filters.chat_types import ChatTypeFilter

from services.validator import is_working_url
from services.google_safe_browsing import check_google_safebrowsing
from services.virustotal import check_virustotal
from services.blacklist_check import check_blacklists
from services.infrastructure_check import check_infrastructure

from utils.cache import get_cache, set_cache
from utils.scoring import calculate_risk_score


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–Ø –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –∏ —Å–∫–∞–∂—É –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –µ–π –¥–æ–≤–µ—Ä—è—Ç—å"
    )


@user_private_router.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ \n"
        "/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è \n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É, –≤—ã–∑—ã–≤–∞—é—â—É—é —É –≤–∞—Å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –æ—Ç–≤–µ—Ç \n"
        "\n"
        "–û–±—Ä–∞—â–∞—é –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –Ω–µ –¥–∞—ë—Ç 100% –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞."
        "–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ"
    )


@user_private_router.message(F.text)
async def handle_link_check(message: types.Message):
    url = message.text.strip()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if not await is_working_url(url):
        await message.answer("üö´ –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
        return

    # ‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached = get_cache(url)
    if cached:
        await message.answer(f"‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞:\n{cached['report']}", parse_mode="Markdown")
        return

    await message.answer("üîç –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∞–π—Ç–∞...")

    # üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 4 –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
    google_res, vt_res, bl_res, infra = await asyncio.gather(
        check_google_safebrowsing(url),
        check_virustotal(url),
        check_blacklists(url),
        check_infrastructure(url)
    )

    # üîé –ü–æ–¥—Å—á—ë—Ç —Ä–∏—Å–∫–∞
    results = {
        "google": google_res,
        "vt": vt_res,
        "blacklist": bl_res,
        "infra": infra
    }

    level, score = calculate_risk_score(results)

    # üßæ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞
    ssl_info = infra.get("ssl_info", {})
    ip_info = infra.get("ip_info", {})

    text = (
        f"üîó *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏:* {url}\n\n"
        f"üß≠ Google Safe Browsing: {google_res['status']}\n"
        f"üß™ VirusTotal: {vt_res['status']}\n"
        f"üö® Blacklists: {bl_res['status']}\n\n"
        f"‚ö†Ô∏è *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* {level.upper()} ({score} –±–∞–ª–ª–æ–≤)\n\n"
        f"üåê *–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞:*\n"
        f"üè† –î–æ–º–µ–Ω: `{infra['hostname']}`\n"
        f"üîí HTTPS: {'–î–∞' if infra['is_https'] else '–ù–µ—Ç'}\n"
    )

    # SSL-–∏–Ω—Ñ–æ
    if ssl_info.get("valid"):
        text += (
            f"üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω: *{ssl_info.get('issued_by', 'N/A')}*\n"
            f"üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: `{ssl_info.get('valid_to', 'N/A')}`\n"
            f"üïê –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: `{ssl_info.get('days_left', 'N/A')}`\n"
        )
    else:
        text += f"‚ö†Ô∏è SSL: {ssl_info.get('error', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"

    # IP –∏ —Ö–æ—Å—Ç–∏–Ω–≥
    text += (
        f"\nüåç *–•–æ—Å—Ç–∏–Ω–≥:*\n"
        f"üß© IP: `{ip_info.get('ip', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}`\n"
        f"üè≥Ô∏è –°—Ç—Ä–∞–Ω–∞: {ip_info.get('country', 'Unknown')}\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {ip_info.get('org', 'Unknown')}\n"
        f"üõ∞ ASN: {ip_info.get('asn', 'Unknown')}\n"
        f"üì¶ CDN: {infra.get('cdn', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}\n"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ / –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞
    if infra.get("proxy_suspect"):
        text += "\nüö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞*"
    else:
        text += "\n‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    set_cache(url, {"report": text, "results": results})

@user_private_router.message()
async def handle_link_check_incorrect(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ url —Å—Å—ã–ª–∫—É")
    