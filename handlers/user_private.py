import asyncio
from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command

from filters.chat_types import ChatTypeFilter

from utils.validators import is_working_url
from utils.check import ai_checker, fetch_real_url, fetch_site_data


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–Ø –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –∏ —Å–∫–∞–∂—É –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –µ–π –¥–æ–≤–µ—Ä—è—Ç—å"
    )


@user_private_router.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ \n"
        "/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è \n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É, –≤—ã–∑—ã–≤–∞—é—â—É—é —É –≤–∞—Å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –æ—Ç–≤–µ—Ç \n"
        "\n"
        "–û–±—Ä–∞—â–∞—é –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –Ω–µ –¥–∞—ë—Ç 100% –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞."
        "–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ"
    )


@user_private_router.message(F.text)
async def lick_checher(message: types.Message):
    input_url = message.text.strip()

    if not await is_working_url(input_url):
        await message.answer("URL –≤–≤–µ–¥—ë–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
    real_url_task = fetch_real_url(input_url)
    site_data_task = fetch_site_data(input_url)
    ai_check_task = ai_checker(input_url)

    real_url_result, site_data_result, ai_check_result = await asyncio.gather(
        real_url_task, site_data_task, ai_check_task, return_exceptions=True
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
    if (
        isinstance(real_url_result, Exception)
        or isinstance(site_data_result, Exception)
        or isinstance(ai_check_result, Exception)
    ):
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL")
        return

    real_url, redirect_count = real_url_result
    title, description = site_data_result

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    if not all(
        [real_url, redirect_count is not None, title, description, ai_check_result]
    ):
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
        return

    response = (
        "üîó –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏\n\n"
        f"üìç –†–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:\n{real_url}\n"
        f"üîó –ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å:\n{input_url}\n\n"
        f"üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç—ã: –≤—Å–µ–≥–æ: {redirect_count}\n\n"
        f"üìú –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π—Ç–∞:\n{title}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞:\n{description}\n\n"
        "–ß—Ç–æ —ç—Ç–æ –∑–∞ —Å–∞–π—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–æ–º typosquatting?\n"
        f"{ai_check_result}"
    )

    await message.answer(response)


@user_private_router.message()
async def lick_checher2(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É")
