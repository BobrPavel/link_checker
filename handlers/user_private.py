import os
import aiohttp
from bs4 import BeautifulSoup

from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command

import openai

from filters.chat_types import ChatTypeFilter


openai_key = os.getenv("KEY")   # –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª .env

# key = you_key
# openai_key = os.getenv(key) # –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª .env

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


async def fetch_final_url(input_url):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(input_url, allow_redirects=True) as response:
                final_url = str(response.url)
                redirect_count = len(response.history)
                return final_url, redirect_count
        except Exception as e:
            return None, None


async def fetch_site_data(input_url):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(input_url, timeout=10) as response:
                if response.status != 200:
                    return input_url, None, None

                html = await response.text()
                soup = BeautifulSoup(html, "html.parser")

                title = (
                    soup.title.string.strip()
                    if soup.title and soup.title.string
                    else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                )

                description_tag = soup.find("meta", attrs={"name": "description"})
                description = (
                    description_tag["content"].strip()
                    if description_tag and "content" in description_tag.attrs
                    else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                )

                return title, description

        except Exception as e:
            return None, None


async def ai_checker(input_url):
    prompt = [
        f"–ü—Ä–æ–≤–µ—Ä—å —ç—Ç—É —Å—Å—ã–ª–∫—É: {input_url} –û—Ç–≤–µ—Ç—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –ß—Ç–æ —ç—Ç–æ –∑–∞ —Å–∞–π—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–æ–º typosquatting"
    ]

    client = openai.AsyncOpenAI(api_key=openai_key)
    response = await client.chat.completions.create(
        model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–Ø –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –∏ —Å–∫–∞–∂—É –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –µ–π –¥–æ–≤–µ—Ä—è—Ç—å"
    )


@user_private_router.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ \n"
        "/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è \n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É, –≤—ã–∑—ã–≤–∞—é—â—É—é —É –≤–∞—Å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –æ—Ç–≤–µ—Ç \n"
        "\n"
        "–û–±—Ä–∞—â–∞—é –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –Ω–µ –¥–∞—ë—Ç 100% –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞."
        "–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ"
    )


@user_private_router.message(F.text)
async def lick_checher(message: types.Message):
    input_url = message.text

    real_url, redirect_count = await fetch_final_url(input_url)
    title, description = await fetch_site_data(input_url)
    ai_check_result = await ai_checker(input_url)

    if redirect_count > 0:
        redirect_opinion = "–¥–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    else:
        redirect_opinion = "–¥–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è"

    await message.answer(
        "üîó –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏ \n"
        "\n"
        "üìç –†–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: \n"
        f"{real_url} \n"
        "üîó –ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å: \n"
        f"{input_url} \n"
        "\n"
        f"üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç—ã: –í—Å–µ–≥–æ: {redirect_count}, {redirect_opinion} \n"
        "\n"
        "üìú –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π—Ç–∞: \n"
        f"{title} \n"
        "üìã –û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞: \n"
        f"{description} \n"
        "\n"
        "–ß—Ç–æ —ç—Ç–æ –∑–∞ —Å–∞–π—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–æ–º typosquatting? \n "
        f"{ai_check_result}"
    )


@user_private_router.message()
async def lick_checher2(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É")


