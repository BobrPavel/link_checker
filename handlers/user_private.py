from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command

from filters.chat_types import ChatTypeFilter

from utils.validators import is_working_url
from utils.check import ai_checker, fetch_real_url, fetch_site_data


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–Ø –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –∏ —Å–∫–∞–∂—É –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –µ–π –¥–æ–≤–µ—Ä—è—Ç—å"
    )


@user_private_router.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ \n"
        "/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è \n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É, –≤—ã–∑—ã–≤–∞—é—â—É—é —É –≤–∞—Å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –æ—Ç–≤–µ—Ç \n"
        "\n"
        "–û–±—Ä–∞—â–∞—é –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –Ω–µ –¥–∞—ë—Ç 100% –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞."
        "–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ"
    )


@user_private_router.message(F.text)
async def lick_checher(message: types.Message):
    input_url = message.text

    status = await is_working_url(input_url)

    if status is False:
        await message.answer("URL –≤–≤–µ–¥—ë–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        real_url, redirect_count = await fetch_real_url(input_url)
        title, description = await fetch_site_data(input_url)
        print(real_url, redirect_count, title, description)
        ai_check_result = await ai_checker(input_url)

        if real_url is None or redirect_count is None or title is None or description is None:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        else:
            await message.answer(
                "üîó –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏ \n"
                "\n"
                "üìç –†–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: \n"
                f"{real_url} \n"
                "üîó –ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å: \n"
                f"{input_url} \n"
                "\n"
                f"üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç—ã: –≤—Å–µ–≥–æ: {redirect_count}\n"
                "\n"
                "üìú –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π—Ç–∞: \n"
                f"{title} \n"
                "üìã –û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞: \n"
                f"{description} \n"
                "\n"
                "–ß—Ç–æ —ç—Ç–æ –∑–∞ —Å–∞–π—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–æ–º typosquatting? \n "
                f"{ai_check_result}"
            )



@user_private_router.message()
async def lick_checher2(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É")


