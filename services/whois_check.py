import asyncio
import datetime
import re
import aiohttp

async def fetch_whois_data(domain: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç WHOIS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø—É–±–ª–∏—á–Ω–æ–≥–æ API.
    """

    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º RDAP
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://rdap.org/domain/{domain}") as resp:
                if resp.status != 200:
                    return {"error": f"WHOIS data not available (HTTP {resp.status})"}
                data = await resp.json()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        registrar = data.get("registrar", {}).get("name") or data.get("entities", [{}])[0].get("vcardArray", [[], []])[1][1] if data.get("entities") else "Unknown"

        created_str = data.get("events", [{}])[0].get("eventDate")  # usually 'registration'
        expires_str = None
        for e in data.get("events", []):
            if e.get("eventAction") == "expiration":
                expires_str = e.get("eventDate")
            elif e.get("eventAction") == "registration":
                created_str = e.get("eventDate")

        if created_str:
            created = datetime.datetime.fromisoformat(created_str.replace("Z", "+00:00"))
            age_days = (datetime.datetime.utcnow() - created).days
            age_years = age_days // 365
        else:
            created = None
            age_days = None
            age_years = None

        if expires_str:
            expires = datetime.datetime.fromisoformat(expires_str.replace("Z", "+00:00"))
            days_left = (expires - datetime.datetime.utcnow()).days
        else:
            expires = None
            days_left = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –¥–æ–º–µ–Ω–∞
        if age_days is not None:
            if age_days < 90:
                freshness = "üö® –ù–æ–≤—ã–π (–º–µ–Ω—å—à–µ 3 –º–µ—Å—è—Ü–µ–≤)"
                risk = "–í—ã—Å–æ–∫–∏–π"
            elif age_days < 365:
                freshness = "‚ö†Ô∏è –ú–æ–ª–æ–¥–æ–π (–º–µ–Ω–µ–µ 1 –≥–æ–¥–∞)"
                risk = "–°—Ä–µ–¥–Ω–∏–π"
            else:
                freshness = "‚úÖ –°—Ç–∞—Ä—ã–π (–±–æ–ª–µ–µ –≥–æ–¥–∞)"
                risk = "–ù–∏–∑–∫–∏–π"
        else:
            freshness = "‚ùî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
            risk = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        return {
            "domain": domain,
            "registrar": registrar or "Unknown",
            "created": str(created) if created else "Unknown",
            "expires": str(expires) if expires else "Unknown",
            "age_days": age_days,
            "age_years": age_years,
            "freshness": freshness,
            "risk": risk,
            "days_left": days_left
        }

    except Exception as e:
        return {"error": f"WHOIS error: {e}"}
