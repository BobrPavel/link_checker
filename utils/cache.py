import json
import time
import os
import asyncio
from typing import Optional
from datetime import datetime

from services.validator import is_working_url
from services.google_safe_browsing import check_google_safebrowsing
from services.virustotal import check_virustotal
from services.blacklist_check import check_blacklists
from utils.calculate_risk import calculate_risk_score


CACHE_FILE = os.path.join(os.path.dirname(os.path.dirname(__file__)), "common", "cache.json")
TTL = 60 * 30  # 30 –º–∏–Ω—É—Ç

_cache = {}


# =========================
#   –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
# =========================

def load_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
    global _cache
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                _cache = json.load(f)
            print(f"[CACHE] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(_cache)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
        except Exception as e:
            print(f"[CACHE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            _cache = {}
    else:
        _cache = {}


def save_cache():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
    try:
        with open(CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump(_cache, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[CACHE] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def get_cache(url: str) -> Optional[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã"""
    entry = _cache.get(url)
    if not entry:
        return None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL
    if time.time() - entry["timestamp"] > TTL:
        print(f"[CACHE] ‚è∞ {url} ‚Äî –∑–∞–ø–∏—Å—å —É—Å—Ç–∞—Ä–µ–ª–∞, —É–¥–∞–ª—è—é")
        del _cache[url]
        save_cache()
        return None

    return entry["data"]


def set_cache(url: str, data: dict):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∫—ç—à"""
    _cache[url] = {"timestamp": time.time(), "data": data}
    save_cache()
    print(f"[CACHE] üíæ {url} ‚Äî –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –∫—ç—à")


def clear_cache():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    global _cache
    _cache = {}
    save_cache()
    print("[CACHE] üßπ –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫—ç—à")


# =========================
#   –ï–ñ–ï–î–ù–ï–í–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
# =========================

async def refresh_cache():
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –≤ 00:00:
    - —É–¥–∞–ª—è–µ—Ç –º–µ—Ä—Ç–≤—ã–µ –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å—Å—ã–ª–∫–∏
    - –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–±–æ—á–∏–º
    """
    global _cache
    load_cache()

    print(f"\n[CACHE] üåô –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")

    urls = list(_cache.keys())
    updated = 0
    deleted = 0

    for url in urls:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if time.time() - _cache[url]["timestamp"] > TTL:
            print(f"[CACHE] ‚è≥ {url} ‚Äî —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è—é")
            del _cache[url]
            deleted += 1
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if not await is_working_url(url):
            print(f"[CACHE] ‚ùå {url} ‚Äî –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è—é –∏–∑ –∫—ç—à–∞")
            del _cache[url]
            deleted += 1
            continue

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            google_res, vt_res, bl_res = await asyncio.gather(
                check_google_safebrowsing(url),
                check_virustotal(url),
                check_blacklists(url),
            )
            results = {"google": google_res, "vt": vt_res, "blacklist": bl_res}
            level, score, reasons = calculate_risk_score(results)

            text = (
                f"üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏: {url}\n\n"
                f"üß≠ Google Safe Browsing: {google_res['status']}\n"
                f"üß™ VirusTotal: {vt_res['status']}\n"
                f"üö® Blacklists: {bl_res['status']}\n\n"
                f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: *{level.upper()}* ({score} –±–∞–ª–ª–æ–≤)\n\n"
                f"üìã –ü—Ä–∏—á–∏–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:\n" +
                "\n".join([f"‚Ä¢ {r}" for r in reasons])
            )

            _cache[url] = {
                "timestamp": time.time(),
                "data": {"report": text, "results": results},
            }
            updated += 1
            print(f"[CACHE] üîÅ {url} ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω ({score} –±–∞–ª–ª–æ–≤)")
        except Exception as e:
            print(f"[CACHE] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {url}: {e}")

    save_cache()
    print(f"[CACHE] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated}, —É–¥–∞–ª–µ–Ω–æ {deleted}\n")
